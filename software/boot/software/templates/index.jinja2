{% extends "base.jinja2" %}
{% import "macros.jinja2" as macros %}

{% block title %}Home{% endblock %}

{% block content %}
    <!-- Upload File Modal -->
    <div class="modal fade" id="uploadFileModal" tabindex="-1" aria-labelledby="uploadFileModalLabel"
         aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="uploadFileModalLabel">Upload File</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <form id="uploadFileForm" method="post" enctype="multipart/form-data"
                          action="{{ url_for('upload_file') }}">

                        <div class="mb-3">
                            <label for="group" class="form-label">Group</label>
                            <input class="form-select" list="groupList" id="group" name="group" required>
                            <datalist id="groupList">
                                {% for group in all_groups %}
                                {% endfor %}
                            </datalist>
                        </div>
                        <div class="mb-3">
                            <label for="tool" class="form-label">Tool</label>
                            <input class="form-control" list="toolList" id="tool" name="tool" required>
                            <datalist id="toolList">
                                <!-- Options will be populated dynamically using JavaScript -->
                            </datalist>
                        </div>
                        <div class="mb-3">
                            <label for="version" class="form-label">Version</label>
                            <input class="form-control" type="text" id="version" name="version" required>
                        </div>
                        <div class="mb-3">
                            <label for="fileName" class="form-label">File</label>
                            <input class="form-control" type="file" id="fileName" name="file" required>
                        </div>
                        <div class="mb-3">
                            <label for="name" class="form-label">New file name (optional)</label>
                            <input class="form-control" type="text" id="name" name="name">
                        </div>
                        <button type="submit" class="btn btn-primary">Upload</button>
                    </form>
                </div>
            </div>
        </div>
    </div>

    <div id="view1" class="accordion accordion-flush">
        {% for group in groups %}
            <div class="accordion-item">
                <h2 class="accordion-header">
                    <button class="accordion-button {% if not loop.first %}collapsed{% endif %}" type="button"
                            data-bs-toggle="collapse"
                            data-bs-target="#flush-collapse{{ loop.index }}"
                            aria-expanded="{% if loop.first %}true{% else %}false{% endif %}"
                            aria-controls="flush-collapse{{ loop.index }}">
                        {{ group.group }} ({{ group.tool_count }})
                    </button>
                </h2>
                <div id="flush-collapse{{ loop.index }}"
                     class="accordion-collapse collapse {% if loop.first %}show{% endif %}">
                    <div class="accordion-body">
                        <div class="accordion" id="childAccordion{{ loop.index }}">
                            <div class="row row-cols-1 row-cols-md-3 g-4">
                                {% for tool in group.tools %}
                                    <div class="col">
                                        <div class="card mb-3">
                                            <div class="card-header">
                                                <a href="{{ url_for('show_all_versions', group=group.group, tool=tool.name) }}">
                                                    {{ tool.name }} ({{ tool.version_count }})
                                                </a>
                                                <button class="btn btn-secondary btn-sm float-end upload-btn"
                                                        data-group="{{ group.group }}" data-tool="{{ tool.name }}"
                                                        data-bs-toggle="modal" data-bs-target="#uploadFileModal">Upload
                                                </button>
                                            </div>
                                            <div class="card-body">
                                                {{ macros.render_versions(group, tool) }}
                                            </div>
                                        </div>
                                    </div>
                                {% endfor %}
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        {% endfor %}
    </div>

{% endblock %}

{% block scripts %}
    <script>
        document.addEventListener('DOMContentLoaded', function () {
            const groupInput = document.getElementById('group');
            const toolInput = document.getElementById('tool');
            const toolList = document.getElementById('toolList');
            const uploadFileForm = document.getElementById('uploadFileForm');
            const uploadFileModal = new bootstrap.Modal(document.getElementById('uploadFileModal'));

            groupInput.addEventListener('input', function () {
                const selectedGroup = groupInput.value;
                toolList.innerHTML = '';

                const groups = {{ all_groups | tojson }};
                const group = groups.find(g => g.group === selectedGroup);

                if (group) {
                    group.tools.forEach(tool => {
                        const option = document.createElement('option');
                        option.value = tool.name;
                        toolList.appendChild(option);
                    });
                }
            });

            const expandAllButton = document.getElementById('expandAll');
            expandAllButton.addEventListener('click', function () {
                const accordions = document.querySelectorAll('.accordion-collapse');
                accordions.forEach(accordion => {
                    if (!accordion.classList.contains('show')) {
                        accordion.classList.add('show');
                    }
                });
            });

            const uploadButtons = document.querySelectorAll('.upload-btn');
            uploadButtons.forEach(button => {
                button.addEventListener('click', function () {
                    const group = button.getAttribute('data-group');
                    const tool = button.getAttribute('data-tool');
                    groupInput.value = group;
                    toolInput.value = tool;
                });
            });

            // Clear form after submission
            uploadFileForm.addEventListener('submit', function (event) {
                event.preventDefault();
                const formData = new FormData(uploadFileForm);
                const xhr = new XMLHttpRequest();

                // Show the progress modal
                const progressModal = new bootstrap.Modal(document.getElementById('progressModal'));
                progressModal.show();

                xhr.upload.addEventListener('progress', function (event) {
                    if (event.lengthComputable) {
                        const percentComplete = (event.loaded / event.total) * 100;
                        document.getElementById('progressBar').style.width = percentComplete + '%';
                    }
                });

                xhr.addEventListener('load', function () {
                    progressModal.hide();
                    if (xhr.status === 200) {
                        alert('File uploaded successfully');
                        uploadFileForm.reset();
                        window.location.reload();
                    } else {
                        alert('File upload failed');
                    }
                });

                xhr.open('POST', uploadFileForm.action);
                xhr.send(formData);
            });
        });
    </script>
{% endblock %}